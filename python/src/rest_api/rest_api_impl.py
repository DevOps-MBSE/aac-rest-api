"""The AaC REST API plugin implementation module."""

# NOTE: It is safe to edit this file.
# This file is only initially generated by aac gen-plugin, and it won't be overwritten if the file already exists.

# There may be some unused imports depending on the definition of the plugin, be sure to remove unused imports.
from typing import Any

from aac.context.definition import Definition
from aac.context.language_context import LanguageContext
from aac.context.source_location import SourceLocation
from aac.execute.aac_execution_result import (
    ExecutionResult,
    ExecutionStatus,
    ExecutionMessage,
    MessageLevel,
)
from aac.in_out.files.aac_file import AaCFile

plugin_name = "REST API"


def rest_api(host: str, port: int) -> ExecutionResult:
    """
    Business logic for allowing rest-api command to perform Start a RESTful interface for interacting with and managing AaC.

    Args:
         host (str): Set the hostname of the service. Useful for operating behind proxies.
         port (int): The port to which the RESTful service will be bound.

    Returns:
         The results of the execution of the rest-api command.
    """

    # TODO: implement plugin logic here
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []
    error_msg = ExecutionMessage(
        "The rest-api command for the REST API plugin has not been implemented yet.",
        MessageLevel.ERROR,
        None,
        None,
    )
    messages.append(error_msg)

    return ExecutionResult(plugin_name, "rest-api", status, messages)


def gen_openapi_spec(output_directory: str) -> ExecutionResult:
    """
     Business logic for allowing gen-openapi-spec command to perform Write the OpenAPI schema to a JSON file.
     
     Args:
         output_directory (str): The output directory in which to write the AaC OpenAPI JSON file.

    Returns:
         The results of the execution of the gen-openapi-spec command.
    """

    # TODO: implement plugin logic here
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []
    error_msg = ExecutionMessage(
        "The gen-openapi-spec command for the REST API plugin has not been implemented yet.",
        MessageLevel.ERROR,
        None,
        None,
    )
    messages.append(error_msg)

    return ExecutionResult(plugin_name, "gen-openapi-spec", status, messages)
